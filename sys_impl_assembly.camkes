/**************************************************************************
  Copyright (c) 2013, 2014, 2015 Rockwell Collins and the University of Minnesota.
  Developed with the sponsorship of the Defense Advanced Research Projects Agency (DARPA).

  Permission is hereby granted, free of charge, to any person obtaining a copy of this data,
  including any software or models in source or binary form, as well as any drawings, specifications, 
  and documentation (collectively "the Data"), to deal in the Data without restriction, including 
  without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
  and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
  subject to the following conditions: 

  The above copyright notice and this permission notice shall be included in all copies or
  substantial portions of the Data.

  THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
  LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
  IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
  FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA. 

 **************************************************************************/


/**************************************************************************

   File: /home/ajgacek/june/apps/smaccmpilot/./sys_impl_assembly.camkes
   Created on: 2015/08/01 14:52:04
   using Dulcimer AADL system build tool suite 

   ***AUTOGENERATED CODE: DO NOT MODIFY***

  This file contains the main CAmkES assembly for the  
  AADL system instance rooted at sys_impl_Instance.

 **************************************************************************/
import <std_connector.camkes>;
import "components/dispatch_periodic/dispatch_periodic.camkes";


import <TimeServerOdroid/TimeServer.camkes>;


import "components/controllableVehicleConsumerOutput/controllableVehicleConsumerOutput.camkes";
import "components/fragment_0x200/fragment_0x200.camkes";
import "components/controllableVehicleConsumerInput/controllableVehicleConsumerInput.camkes";
import "components/controllableVehicleProducerInput/controllableVehicleProducerInput.camkes";
import "components/frame_datalink_encode/frame_datalink_encode.camkes";
import "components/commsecDecodeState/commsecDecodeState.camkes";
import "components/thread_period_5ms/thread_period_5ms.camkes";
import "components/send_transdata/send_transdata.camkes";
import "components/uart/uart.camkes";
import "components/commsecEncodeStaticKey/commsecEncodeStaticKey.camkes";
import "components/can_node/can_node.camkes";
import "components/periodic_camera_injector/periodic_camera_injector.camkes";
import "components/frame_datalink_decode/frame_datalink_decode.camkes";
import "components/frameBuffer/frameBuffer.camkes";
import "components/fragment_reassembly/fragment_reassembly.camkes";
import "components/thread_period_1000ms/thread_period_1000ms.camkes";
import "components/fragment_drop/fragment_drop.camkes";
import "components/commsecDecodeStaticKey/commsecDecodeStaticKey.camkes";
import "components/controllableVehicleProducerOutput/controllableVehicleProducerOutput.camkes";
import "components/camera_vm/camera_vm.camkes";
import "components/commsecEncodeState/commsecEncodeState.camkes";



connector seL4RPCCallDataport {
    from Procedure client template "seL4RPCCallDataport-from.template.c";
    to Procedure server template "seL4RPCCallDataport-to.template.c";
}


assembly {
	composition {
        // Periodic components
        component dispatch_periodic dispatch_periodic_inst;


		component TimeServerOdroid time_server;


		// IRQ-handling hardware components

		// component instances for all AADL-defined threads
		component controllableVehicleConsumerOutput controllableVehicleConsumerOutput_inst;
		component fragment_0x200 fragment_0x200_inst;
		component controllableVehicleConsumerInput controllableVehicleConsumerInput_inst;
		component controllableVehicleProducerInput controllableVehicleProducerInput_inst;
		component frame_datalink_encode frame_datalink_encode_inst;
		component commsecDecodeState commsecDecodeState_inst;
		component thread_period_5ms thread_period_5ms_inst;
		component send_transdata send_transdata_inst;
		component uart uart_inst;
		component commsecEncodeStaticKey commsecEncodeStaticKey_inst;
		component can_node can_node_inst;
		component periodic_camera_injector periodic_camera_injector_inst;
		component frame_datalink_decode frame_datalink_decode_inst;
		component frameBuffer frameBuffer_inst;
		component fragment_reassembly fragment_reassembly_inst;
		component thread_period_1000ms thread_period_1000ms_inst;
		component fragment_drop fragment_drop_inst;
		component commsecDecodeStaticKey commsecDecodeStaticKey_inst;
		component controllableVehicleProducerOutput controllableVehicleProducerOutput_inst;
		component camera_vm camera_vm_inst;
		component commsecEncodeState commsecEncodeState_inst;


		// connections from active dispatchers to passive threads
		connection seL4RPCCallDataport conn1 (from fragment_0x200_inst.fragment_drop_inst, to fragment_drop_inst.dispatch);

		connection seL4RPCCallDataport conn2 (from frame_datalink_encode_inst.send_transdata_inst, to send_transdata_inst.dispatch);

		connection seL4RPCCallDataport conn3 (from thread_period_5ms_inst.controllableVehicleConsumerInput_inst, to controllableVehicleConsumerInput_inst.dispatch);
		connection seL4RPCCallDataport conn4 (from thread_period_5ms_inst.controllableVehicleConsumerOutput_inst, to controllableVehicleConsumerOutput_inst.dispatch);
		connection seL4RPCCallDataport conn5 (from thread_period_5ms_inst.fragment_drop_inst, to fragment_drop_inst.dispatch);
		connection seL4RPCCallDataport conn6 (from thread_period_5ms_inst.frameBuffer_inst, to frameBuffer_inst.dispatch);
		connection seL4RPCCallDataport conn7 (from thread_period_5ms_inst.commsecDecodeState_inst, to commsecDecodeState_inst.dispatch);

		connection seL4RPCCallDataport conn8 (from commsecEncodeStaticKey_inst.commsecEncodeState_inst, to commsecEncodeState_inst.dispatch);

		connection seL4RPCCallDataport conn9 (from periodic_camera_injector_inst.controllableVehicleConsumerInput_inst, to controllableVehicleConsumerInput_inst.dispatch);
		connection seL4RPCCallDataport conn10 (from periodic_camera_injector_inst.fragment_drop_inst, to fragment_drop_inst.dispatch);

		connection seL4RPCCallDataport conn11 (from frame_datalink_decode_inst.frameBuffer_inst, to frameBuffer_inst.dispatch);

		connection seL4RPCCallDataport conn12 (from fragment_reassembly_inst.commsecEncodeState_inst, to commsecEncodeState_inst.dispatch);
		connection seL4RPCCallDataport conn13 (from fragment_reassembly_inst.controllableVehicleProducerOutput_inst, to controllableVehicleProducerOutput_inst.dispatch);
		connection seL4RPCCallDataport conn14 (from fragment_reassembly_inst.controllableVehicleProducerInput_inst, to controllableVehicleProducerInput_inst.dispatch);

		connection seL4RPCCallDataport conn15 (from commsecDecodeStaticKey_inst.commsecDecodeState_inst, to commsecDecodeState_inst.dispatch);

	

		// connections from active dispatcher send/receive to other active dispatcher send/receive
		connection seL4RPCCall conn16 (from fragment_0x200_inst.fragment_0x200_Output_fragment_complete_0x200_0, to can_node_inst.Input_sender); 
			connection seL4RPCCall conn17 (from fragment_0x200_inst.fragment_0x200_Output_fragment_req_0x200_0, to can_node_inst.Input_sender); 
			connection seL4RPCCall conn18 (from fragment_0x200_inst.fragment_0x200_Output_fragment_abort_0x200_0, to can_node_inst.Input_abortHandler); 
			connection seL4RPCCall conn19 (from frame_datalink_encode_inst.send_transdata_Output_send_translate_0, to uart_inst.Input_send); 
			connection seL4RPCCall conn20 (from thread_period_5ms_inst.fragment_drop_Output_new_msg_0, to fragment_0x200_inst.Input_fragment_req_0x200); 
			connection seL4RPCCall conn21 (from uart_inst.uart_Output_recv_resp_0, to frame_datalink_encode_inst.Input_complete); 
			connection seL4RPCCall conn22 (from uart_inst.uart_Output_recv_rx_0, to frame_datalink_decode_inst.Input_decoder_serial_in); 
			connection seL4RPCCall conn23 (from commsecEncodeStaticKey_inst.commsecEncodeState_Output_plaintext_encode_0, to frame_datalink_encode_inst.Input_encoder_ct_in); 
			connection seL4RPCCall conn24 (from can_node_inst.can_node_Output_recvHandler_0, to fragment_reassembly_inst.Input_receive_msg); 
			connection seL4RPCCall conn25 (from can_node_inst.can_node_Output_statusHandler_0, to fragment_0x200_inst.Input_fragment_complete_0x200); 
			connection seL4RPCCall conn26 (from periodic_camera_injector_inst.fragment_drop_Output_new_msg_0, to fragment_0x200_inst.Input_fragment_req_0x200); 
			connection seL4RPCCall conn27 (from fragment_reassembly_inst.controllableVehicleProducerOutput_Output_parse_frame_22, to periodic_camera_injector_inst.Input_set_response); 
			connection seL4RPCCall conn28 (from fragment_reassembly_inst.commsecEncodeState_Output_plaintext_encode_0, to frame_datalink_encode_inst.Input_encoder_ct_in); 
			connection seL4RPCCall conn29 (from thread_period_1000ms_inst.thread_period_1000ms_Output_1000ms, to periodic_camera_injector_inst.Input_1000ms); 
			connection seL4RPCCall conn30 (from camera_vm_inst.camera_vm_Output_from_vm_0, to periodic_camera_injector_inst.Input_anglesRx); 
			

		// Periodic dispatcher connections
		connection seL4RPCCall conn31 (from dispatch_periodic_inst.thread_period_5ms_periodic_dispatcher, to thread_period_5ms_inst.thread_period_5ms_periodic_dispatcher);
		connection seL4RPCCall conn32 (from dispatch_periodic_inst.thread_period_1000ms_periodic_dispatcher, to thread_period_1000ms_inst.thread_period_1000ms_periodic_dispatcher);


		connection seL4TimeServer periodic_dispatch_timer(from dispatch_periodic_inst.timer, to time_server.the_timer);
		connection seL4GlobalAsynchCallback echo_int(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);


		// IRQ connections (if any)

		// component read/write connections

		// Direct RPC connections

		// Shared memory connections
	}
    configuration {
		dispatch_periodic_inst.timer_attributes = "10"; 
		dispatch_periodic_inst.timer_global_endpoint = "periodic_dispatcher_timer";
		dispatch_periodic_inst.timer_complete_global_endpoint = "periodic_dispatcher_timer";				
		dispatch_periodic_inst.priority = 201;  
		controllableVehicleConsumerOutput_inst.priority = 200;	

		fragment_0x200_inst.priority = 123;	

		controllableVehicleConsumerInput_inst.priority = 200;	

		controllableVehicleProducerInput_inst.priority = 200;	

		frame_datalink_encode_inst.priority = 123;	

		commsecDecodeState_inst.priority = 200;	

		thread_period_5ms_inst.priority = 122;	

		send_transdata_inst.priority = 200;	

		commsecEncodeStaticKey_inst.priority = 120;	

		periodic_camera_injector_inst.priority = 121;	

		frame_datalink_decode_inst.priority = 123;	

		frameBuffer_inst.priority = 200;	

		fragment_reassembly_inst.priority = 123;	

		thread_period_1000ms_inst.priority = 121;	

		fragment_drop_inst.priority = 200;	

		commsecDecodeStaticKey_inst.priority = 120;	

		controllableVehicleProducerOutput_inst.priority = 200;	

		commsecEncodeState_inst.priority = 200;	


		controllableVehicleConsumerOutput_inst._control_stack_size = 4096;	

		fragment_0x200_inst._control_stack_size = 4096;	

		controllableVehicleConsumerInput_inst._control_stack_size = 4096;	

		controllableVehicleProducerInput_inst._control_stack_size = 4096;	

		frame_datalink_encode_inst._control_stack_size = 4096;	

		commsecDecodeState_inst._control_stack_size = 4096;	

		thread_period_5ms_inst._control_stack_size = 4096;	

		send_transdata_inst._control_stack_size = 4096;	

		commsecEncodeStaticKey_inst._control_stack_size = 4096;	

		periodic_camera_injector_inst._control_stack_size = 4096;	

		frame_datalink_decode_inst._control_stack_size = 4096;	

		frameBuffer_inst._control_stack_size = 4096;	

		fragment_reassembly_inst._control_stack_size = 4096;	

		thread_period_1000ms_inst._control_stack_size = 4096;	

		fragment_drop_inst._control_stack_size = 4096;	

		commsecDecodeStaticKey_inst._control_stack_size = 4096;	

		controllableVehicleProducerOutput_inst._control_stack_size = 4096;	

		commsecEncodeState_inst._control_stack_size = 4096;	

		

		fragment_0x200_inst.fragment_drop_inst_attributes = "11"; 

		frame_datalink_encode_inst.send_transdata_inst_attributes = "12"; 

		thread_period_5ms_inst.controllableVehicleConsumerInput_inst_attributes = "13"; 
		thread_period_5ms_inst.controllableVehicleConsumerOutput_inst_attributes = "14"; 
		thread_period_5ms_inst.fragment_drop_inst_attributes = "15"; 
		thread_period_5ms_inst.frameBuffer_inst_attributes = "16"; 
		thread_period_5ms_inst.commsecDecodeState_inst_attributes = "17"; 

		commsecEncodeStaticKey_inst.commsecEncodeState_inst_attributes = "18"; 

		periodic_camera_injector_inst.controllableVehicleConsumerInput_inst_attributes = "19"; 
		periodic_camera_injector_inst.fragment_drop_inst_attributes = "20"; 

		frame_datalink_decode_inst.frameBuffer_inst_attributes = "21"; 

		fragment_reassembly_inst.commsecEncodeState_inst_attributes = "22"; 
		fragment_reassembly_inst.controllableVehicleProducerOutput_inst_attributes = "23"; 
		fragment_reassembly_inst.controllableVehicleProducerInput_inst_attributes = "24"; 

		commsecDecodeStaticKey_inst.commsecDecodeState_inst_attributes = "25"; 

	

    }
}


/**************************************************************************
  End of autogenerated file: /home/ajgacek/june/apps/smaccmpilot/./sys_impl_assembly.camkes
 **************************************************************************/
